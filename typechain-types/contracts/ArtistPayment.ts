/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ArtistPaymentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE_PERCENTAGE"
      | "craftiaxAddress"
      | "craftiaxFeePercentage"
      | "owner"
      | "payArtist"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateCraftiaxAddress"
      | "updateFeePercentage"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CraftiaxAddressUpdated"
      | "FeeUpdated"
      | "OwnershipTransferred"
      | "PaymentProcessed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "craftiaxAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "craftiaxFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payArtist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCraftiaxAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePercentage",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "craftiaxAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "craftiaxFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payArtist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCraftiaxAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePercentage",
    data: BytesLike
  ): Result;
}

export namespace CraftiaxAddressUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentProcessedEvent {
  export type InputTuple = [
    artist: AddressLike,
    artistAmount: BigNumberish,
    craftiaxFee: BigNumberish
  ];
  export type OutputTuple = [
    artist: string,
    artistAmount: bigint,
    craftiaxFee: bigint
  ];
  export interface OutputObject {
    artist: string;
    artistAmount: bigint;
    craftiaxFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArtistPayment extends BaseContract {
  connect(runner?: ContractRunner | null): ArtistPayment;
  waitForDeployment(): Promise<this>;

  interface: ArtistPaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  craftiaxAddress: TypedContractMethod<[], [string], "view">;

  craftiaxFeePercentage: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payArtist: TypedContractMethod<
    [artistAddress: AddressLike],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCraftiaxAddress: TypedContractMethod<
    [newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeePercentage: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "craftiaxAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "craftiaxFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payArtist"
  ): TypedContractMethod<[artistAddress: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCraftiaxAddress"
  ): TypedContractMethod<[newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeePercentage"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CraftiaxAddressUpdated"
  ): TypedContractEvent<
    CraftiaxAddressUpdatedEvent.InputTuple,
    CraftiaxAddressUpdatedEvent.OutputTuple,
    CraftiaxAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentProcessed"
  ): TypedContractEvent<
    PaymentProcessedEvent.InputTuple,
    PaymentProcessedEvent.OutputTuple,
    PaymentProcessedEvent.OutputObject
  >;

  filters: {
    "CraftiaxAddressUpdated(address)": TypedContractEvent<
      CraftiaxAddressUpdatedEvent.InputTuple,
      CraftiaxAddressUpdatedEvent.OutputTuple,
      CraftiaxAddressUpdatedEvent.OutputObject
    >;
    CraftiaxAddressUpdated: TypedContractEvent<
      CraftiaxAddressUpdatedEvent.InputTuple,
      CraftiaxAddressUpdatedEvent.OutputTuple,
      CraftiaxAddressUpdatedEvent.OutputObject
    >;

    "FeeUpdated(uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentProcessed(address,uint256,uint256)": TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;
    PaymentProcessed: TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;
  };
}
