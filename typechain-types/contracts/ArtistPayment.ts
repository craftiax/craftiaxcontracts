/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ArtistPaymentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE_PERCENTAGE"
      | "MAX_PAYMENT"
      | "MIN_PAYMENT"
      | "craftiaxAddress"
      | "craftiaxFeePercentage"
      | "eip712Domain"
      | "generalMaxPayment"
      | "generalMinPayment"
      | "invalidateNonce"
      | "isVerifiedArtist"
      | "nonces"
      | "owner"
      | "payArtist"
      | "renounceOwnership"
      | "setVerificationStatus"
      | "setVerificationStatusBatch"
      | "transferOwnership"
      | "updateCraftiaxAddress"
      | "updateFeePercentage"
      | "updatePaymentLimits"
      | "updateVerifier"
      | "verifiedMaxPayment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArtistVerificationStatusUpdated"
      | "CraftiaxAddressUpdated"
      | "EIP712DomainChanged"
      | "FeeUpdated"
      | "NonceInvalidated"
      | "OwnershipTransferred"
      | "PaymentLimitsUpdated"
      | "PaymentProcessed"
      | "VerifierUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PAYMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PAYMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "craftiaxAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "craftiaxFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generalMaxPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generalMinPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedArtist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payArtist",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationStatusBatch",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCraftiaxAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaymentLimits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedMaxPayment",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PAYMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PAYMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "craftiaxAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "craftiaxFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generalMaxPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generalMinPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payArtist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationStatusBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCraftiaxAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymentLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedMaxPayment",
    data: BytesLike
  ): Result;
}

export namespace ArtistVerificationStatusUpdatedEvent {
  export type InputTuple = [artist: AddressLike, isVerified: boolean];
  export type OutputTuple = [artist: string, isVerified: boolean];
  export interface OutputObject {
    artist: string;
    isVerified: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CraftiaxAddressUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonceInvalidatedEvent {
  export type InputTuple = [user: AddressLike, currentNonce: BigNumberish];
  export type OutputTuple = [user: string, currentNonce: bigint];
  export interface OutputObject {
    user: string;
    currentNonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentLimitsUpdatedEvent {
  export type InputTuple = [
    generalMin: BigNumberish,
    generalMax: BigNumberish,
    verifiedMax: BigNumberish
  ];
  export type OutputTuple = [
    generalMin: bigint,
    generalMax: bigint,
    verifiedMax: bigint
  ];
  export interface OutputObject {
    generalMin: bigint;
    generalMax: bigint;
    verifiedMax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentProcessedEvent {
  export type InputTuple = [
    artist: AddressLike,
    artistAmount: BigNumberish,
    craftiaxFee: BigNumberish,
    isVerified: boolean
  ];
  export type OutputTuple = [
    artist: string,
    artistAmount: bigint,
    craftiaxFee: bigint,
    isVerified: boolean
  ];
  export interface OutputObject {
    artist: string;
    artistAmount: bigint;
    craftiaxFee: bigint;
    isVerified: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierUpdatedEvent {
  export type InputTuple = [oldVerifier: AddressLike, newVerifier: AddressLike];
  export type OutputTuple = [oldVerifier: string, newVerifier: string];
  export interface OutputObject {
    oldVerifier: string;
    newVerifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArtistPayment extends BaseContract {
  connect(runner?: ContractRunner | null): ArtistPayment;
  waitForDeployment(): Promise<this>;

  interface: ArtistPaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  MAX_PAYMENT: TypedContractMethod<[], [bigint], "view">;

  MIN_PAYMENT: TypedContractMethod<[], [bigint], "view">;

  craftiaxAddress: TypedContractMethod<[], [string], "view">;

  craftiaxFeePercentage: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  generalMaxPayment: TypedContractMethod<[], [bigint], "view">;

  generalMinPayment: TypedContractMethod<[], [bigint], "view">;

  invalidateNonce: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  isVerifiedArtist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payArtist: TypedContractMethod<
    [artistAddress: AddressLike, deadline: BigNumberish, signature: BytesLike],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setVerificationStatus: TypedContractMethod<
    [artistAddress: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  setVerificationStatusBatch: TypedContractMethod<
    [artists: AddressLike[], status: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCraftiaxAddress: TypedContractMethod<
    [newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeePercentage: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePaymentLimits: TypedContractMethod<
    [
      newGeneralMin: BigNumberish,
      newGeneralMax: BigNumberish,
      newVerifiedMax: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateVerifier: TypedContractMethod<
    [newVerifier: AddressLike],
    [void],
    "nonpayable"
  >;

  verifiedMaxPayment: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PAYMENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PAYMENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "craftiaxAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "craftiaxFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "generalMaxPayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "generalMinPayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "invalidateNonce"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isVerifiedArtist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payArtist"
  ): TypedContractMethod<
    [artistAddress: AddressLike, deadline: BigNumberish, signature: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerificationStatus"
  ): TypedContractMethod<
    [artistAddress: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVerificationStatusBatch"
  ): TypedContractMethod<
    [artists: AddressLike[], status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCraftiaxAddress"
  ): TypedContractMethod<[newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeePercentage"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePaymentLimits"
  ): TypedContractMethod<
    [
      newGeneralMin: BigNumberish,
      newGeneralMax: BigNumberish,
      newVerifiedMax: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVerifier"
  ): TypedContractMethod<[newVerifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifiedMaxPayment"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ArtistVerificationStatusUpdated"
  ): TypedContractEvent<
    ArtistVerificationStatusUpdatedEvent.InputTuple,
    ArtistVerificationStatusUpdatedEvent.OutputTuple,
    ArtistVerificationStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CraftiaxAddressUpdated"
  ): TypedContractEvent<
    CraftiaxAddressUpdatedEvent.InputTuple,
    CraftiaxAddressUpdatedEvent.OutputTuple,
    CraftiaxAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NonceInvalidated"
  ): TypedContractEvent<
    NonceInvalidatedEvent.InputTuple,
    NonceInvalidatedEvent.OutputTuple,
    NonceInvalidatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentLimitsUpdated"
  ): TypedContractEvent<
    PaymentLimitsUpdatedEvent.InputTuple,
    PaymentLimitsUpdatedEvent.OutputTuple,
    PaymentLimitsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentProcessed"
  ): TypedContractEvent<
    PaymentProcessedEvent.InputTuple,
    PaymentProcessedEvent.OutputTuple,
    PaymentProcessedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierUpdated"
  ): TypedContractEvent<
    VerifierUpdatedEvent.InputTuple,
    VerifierUpdatedEvent.OutputTuple,
    VerifierUpdatedEvent.OutputObject
  >;

  filters: {
    "ArtistVerificationStatusUpdated(address,bool)": TypedContractEvent<
      ArtistVerificationStatusUpdatedEvent.InputTuple,
      ArtistVerificationStatusUpdatedEvent.OutputTuple,
      ArtistVerificationStatusUpdatedEvent.OutputObject
    >;
    ArtistVerificationStatusUpdated: TypedContractEvent<
      ArtistVerificationStatusUpdatedEvent.InputTuple,
      ArtistVerificationStatusUpdatedEvent.OutputTuple,
      ArtistVerificationStatusUpdatedEvent.OutputObject
    >;

    "CraftiaxAddressUpdated(address)": TypedContractEvent<
      CraftiaxAddressUpdatedEvent.InputTuple,
      CraftiaxAddressUpdatedEvent.OutputTuple,
      CraftiaxAddressUpdatedEvent.OutputObject
    >;
    CraftiaxAddressUpdated: TypedContractEvent<
      CraftiaxAddressUpdatedEvent.InputTuple,
      CraftiaxAddressUpdatedEvent.OutputTuple,
      CraftiaxAddressUpdatedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "FeeUpdated(uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "NonceInvalidated(address,uint256)": TypedContractEvent<
      NonceInvalidatedEvent.InputTuple,
      NonceInvalidatedEvent.OutputTuple,
      NonceInvalidatedEvent.OutputObject
    >;
    NonceInvalidated: TypedContractEvent<
      NonceInvalidatedEvent.InputTuple,
      NonceInvalidatedEvent.OutputTuple,
      NonceInvalidatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentLimitsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      PaymentLimitsUpdatedEvent.InputTuple,
      PaymentLimitsUpdatedEvent.OutputTuple,
      PaymentLimitsUpdatedEvent.OutputObject
    >;
    PaymentLimitsUpdated: TypedContractEvent<
      PaymentLimitsUpdatedEvent.InputTuple,
      PaymentLimitsUpdatedEvent.OutputTuple,
      PaymentLimitsUpdatedEvent.OutputObject
    >;

    "PaymentProcessed(address,uint256,uint256,bool)": TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;
    PaymentProcessed: TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;

    "VerifierUpdated(address,address)": TypedContractEvent<
      VerifierUpdatedEvent.InputTuple,
      VerifierUpdatedEvent.OutputTuple,
      VerifierUpdatedEvent.OutputObject
    >;
    VerifierUpdated: TypedContractEvent<
      VerifierUpdatedEvent.InputTuple,
      VerifierUpdatedEvent.OutputTuple,
      VerifierUpdatedEvent.OutputObject
    >;
  };
}
