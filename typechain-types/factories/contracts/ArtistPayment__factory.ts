/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ArtistPayment,
  ArtistPaymentInterface,
} from "../../contracts/ArtistPayment";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newAddress",
        type: "address",
      },
    ],
    name: "CraftiaxAddressUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "FeeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "artist",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "artistAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "craftiaxFee",
        type: "uint256",
      },
    ],
    name: "PaymentProcessed",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_FEE_PERCENTAGE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "craftiaxAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "craftiaxFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "artistAddress",
        type: "address",
      },
    ],
    name: "payArtist",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAddress",
        type: "address",
      },
    ],
    name: "updateCraftiaxAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "updateFeePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620013893803806200138983398181016040528101906200003791906200025b565b806001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000b55760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000ac91906200029e565b60405180910390fd5b620000c6816200012b60201b60201c565b50738ce0f94755eb14f7af130c1aa2cad26dea2a2acd600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560038190555050620002bb565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022382620001f6565b9050919050565b620002358162000216565b81146200024157600080fd5b50565b60008151905062000255816200022a565b92915050565b600060208284031215620002745762000273620001f1565b5b6000620002848482850162000244565b91505092915050565b620002988162000216565b82525050565b6000602082019050620002b560008301846200028d565b92915050565b6110be80620002cb6000396000f3fe60806040526004361061008a5760003560e01c8063790e873911610059578063790e87391461012c578063811ab42a146101555780638da5cb5b14610180578063cdf9c06c146101ab578063f2fde38b146101c757610091565b80633b7810f214610096578063558e44d3146100c15780636cad3fb0146100ec578063715018a61461011557610091565b3661009157005b600080fd5b3480156100a257600080fd5b506100ab6101f0565b6040516100b89190610a03565b60405180910390f35b3480156100cd57600080fd5b506100d66101f6565b6040516100e39190610a03565b60405180910390f35b3480156100f857600080fd5b50610113600480360381019061010e9190610a4f565b6101fb565b005b34801561012157600080fd5b5061012a610288565b005b34801561013857600080fd5b50610153600480360381019061014e9190610ada565b61029c565b005b34801561016157600080fd5b5061016a61041e565b6040516101779190610b16565b60405180910390f35b34801561018c57600080fd5b50610195610444565b6040516101a29190610b16565b60405180910390f35b6101c560048036038101906101c09190610ada565b61046e565b005b3480156101d357600080fd5b506101ee60048036038101906101e99190610ada565b6107bf565b005b60035481565b601481565b610203610845565b6014811115610247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023e90610b8e565b60405180910390fd5b806003819055507f8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c768160405161027d9190610a03565b60405180910390a150565b610290610845565b61029a60006108cc565b565b6102a4610845565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030a90610bfa565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039a90610c66565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f53baf540f6ba4584584ccbd80c43cc27031fb628cd53b60d5b07cb026f044470816040516104139190610b16565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610476610992565b600034116104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090610cf8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051f90610d64565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105af90610df6565b60405180910390fd5b60006064600354346105ca9190610e45565b6105d49190610eb6565b9050600081346105e49190610ee7565b905060008373ffffffffffffffffffffffffffffffffffffffff168260405161060c90610f4c565b60006040518083038185875af1925050503d8060008114610649576040519150601f19603f3d011682016040523d82523d6000602084013e61064e565b606091505b5050905080610692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990610fad565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846040516106da90610f4c565b60006040518083038185875af1925050503d8060008114610717576040519150601f19603f3d011682016040523d82523d6000602084013e61071c565b606091505b5050905080610760576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107579061103f565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff167f7bd379b31566817ff79103ff210fc7d86fa755c249a8dc25f96618362789e19184866040516107a892919061105f565b60405180910390a2505050506107bc6109d8565b50565b6107c7610845565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108395760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016108309190610b16565b60405180910390fd5b610842816108cc565b50565b61084d6109e2565b73ffffffffffffffffffffffffffffffffffffffff1661086b610444565b73ffffffffffffffffffffffffffffffffffffffff16146108ca5761088e6109e2565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108c19190610b16565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002600054036109ce576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b600033905090565b6000819050919050565b6109fd816109ea565b82525050565b6000602082019050610a1860008301846109f4565b92915050565b600080fd5b610a2c816109ea565b8114610a3757600080fd5b50565b600081359050610a4981610a23565b92915050565b600060208284031215610a6557610a64610a1e565b5b6000610a7384828501610a3a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa782610a7c565b9050919050565b610ab781610a9c565b8114610ac257600080fd5b50565b600081359050610ad481610aae565b92915050565b600060208284031215610af057610aef610a1e565b5b6000610afe84828501610ac5565b91505092915050565b610b1081610a9c565b82525050565b6000602082019050610b2b6000830184610b07565b92915050565b600082825260208201905092915050565b7f4665652065786365656473206d6178696d756d20616c6c6f7765640000000000600082015250565b6000610b78601b83610b31565b9150610b8382610b42565b602082019050919050565b60006020820190508181036000830152610ba781610b6b565b9050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b6000610be4600f83610b31565b9150610bef82610bae565b602082019050919050565b60006020820190508181036000830152610c1381610bd7565b9050919050565b7f53616d6520616464726573732070726f76696465640000000000000000000000600082015250565b6000610c50601583610b31565b9150610c5b82610c1a565b602082019050919050565b60006020820190508181036000830152610c7f81610c43565b9050919050565b7f5061796d656e7420616d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b6000610ce2602583610b31565b9150610ced82610c86565b604082019050919050565b60006020820190508181036000830152610d1181610cd5565b9050919050565b7f496e76616c696420617274697374206164647265737300000000000000000000600082015250565b6000610d4e601683610b31565b9150610d5982610d18565b602082019050919050565b60006020820190508181036000830152610d7d81610d41565b9050919050565b7f4172746973742063616e6e6f742062652043726166746961782061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000610de0602183610b31565b9150610deb82610d84565b604082019050919050565b60006020820190508181036000830152610e0f81610dd3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e50826109ea565b9150610e5b836109ea565b9250828202610e69816109ea565b91508282048414831517610e8057610e7f610e16565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec1826109ea565b9150610ecc836109ea565b925082610edc57610edb610e87565b5b828204905092915050565b6000610ef2826109ea565b9150610efd836109ea565b9250828203905081811115610f1557610f14610e16565b5b92915050565b600081905092915050565b50565b6000610f36600083610f1b565b9150610f4182610f26565b600082019050919050565b6000610f5782610f29565b9150819050919050565b7f4661696c656420746f2073656e64207061796d656e7420746f20617274697374600082015250565b6000610f97602083610b31565b9150610fa282610f61565b602082019050919050565b60006020820190508181036000830152610fc681610f8a565b9050919050565b7f4661696c656420746f2073656e64207061796d656e7420746f2043726166746960008201527f6178000000000000000000000000000000000000000000000000000000000000602082015250565b6000611029602283610b31565b915061103482610fcd565b604082019050919050565b600060208201905081810360008301526110588161101c565b9050919050565b600060408201905061107460008301856109f4565b61108160208301846109f4565b939250505056fea26469706673582212200108fb78f81575568a5b8abb71eb120e626ab73e88fa04bff4cd543fcc37630064736f6c63430008140033";

type ArtistPaymentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArtistPaymentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArtistPayment__factory extends ContractFactory {
  constructor(...args: ArtistPaymentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialOwner, overrides || {});
  }
  override deploy(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialOwner, overrides || {}) as Promise<
      ArtistPayment & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ArtistPayment__factory {
    return super.connect(runner) as ArtistPayment__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArtistPaymentInterface {
    return new Interface(_abi) as ArtistPaymentInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ArtistPayment {
    return new Contract(address, _abi, runner) as unknown as ArtistPayment;
  }
}
